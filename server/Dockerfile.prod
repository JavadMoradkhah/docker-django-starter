# syntax=docker/dockerfile:1

ARG PYTHON_VERSION=3.12.2

FROM python:${PYTHON_VERSION}-slim as base

# Prevents Python from writing pyc files.
ENV PYTHONDONTWRITEBYTECODE=1

# Keeps Python from buffering stdout and stderr to avoid situations where
# the application crashes without emitting any logs due to buffering.
ENV PYTHONUNBUFFERED=1

WORKDIR /app

# Download dependencies as a separate step to take advantage of Docker's caching.
COPY requirements.txt requirements.txt
RUN pip install --upgrade pip
RUN pip install --no-cache-dir -r requirements.txt

# Create a non-privileged user that the app will run under.
ARG UID=10001
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    app

RUN mkdir ./staticfiles/ && chown -R app:app ./staticfiles/
RUN mkdir ./mediafiles/ && chown -R app:app ./mediafiles/

RUN touch ./app_logs.log && chown app:app ./app_logs.log

# Switch to the non-privileged user to run the application.
USER app

# Copy the source code into the container.
COPY . .

# Expose the port that the application listens on.
EXPOSE 8000

# Gunicorn relies on the operating system to provide
# all of the load balancing when handling requests.
# Generally we recommend (2 x $num_cores) + 1
# as the number of workers to start off with.
# We can get the number of cpu cores using 'nproc --all'

# Run the application.
# CMD ["gunicorn", "dockerized_django.wsgi:application", "--bind", "0.0.0.0:8000"]
CMD gunicorn dockerized_django.wsgi:application -w $((($(nproc --all) * 2) + 1)) --bind 0.0.0.0:8000